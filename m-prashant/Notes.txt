terraform init --> Initialize Terraform in the directory
terraform plan ---> Shows changes required by the current configuration
terraform apply --> Apply the changes
terraform destroy --> Destory the recent changes
terraform validate --> Validates the configuration files


variables:
   variable "region" {
    description = "The AWS Region to create resources in"
    type = " "
    default = "us-east-1"
   }


   Outputs:
     output "name" {
  value = output value
}



Random Provider:
The "random" provider allows the use of randomness within Terraform configurations. This is a logical provider, which means that it works entirely within Terraform's logic, and doesn't interact with any other services.
random = {
      source = "hashicorp/random"
      version = "3.6.3"
      }


Terraform Remote State Management
 -> Create s3 bucket
 -> Backend block for remote state Management
 terraform {
  backend "s3" or "dynamodb" or etc...{
  bucket = "bucket-name"
  key = "path to trafform.tfstate"
  region = "ap-south-1"
  }
 }


 Data Sources in Terraform"
 It allows you to fetch and use information form:-
    1. external sources or
    2. existing resources within your cloud infrastructure

    Useful for obtaining dyanmic data that you need for your configuration

    Data Source: aws_ami
Use this data source to get the ID of a registered AMI for use in other resources.

data "aws_ami" "example" {
  executable_users = ["self"]
  most_recent      = true
  name_regex       = "^myami-[0-9]{3}"
  owners           = ["self"]

  filter {
    name   = "name"
    values = ["myami-*"]
  }

  filter {
    name   = "root-device-type"
    values = ["ebs"]
  }

  filter {
    name   = "virtualization-type"
    values = ["hvm"]
  }
}